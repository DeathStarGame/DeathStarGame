
on being able to play events before the volunteer auto cluster (origin) exists

- auto-cluster is a higher level abstraction that is closer to an ideal tool, but not a blockng requirement
- the goal, clearly is to have events , so what's the approach ?
- per-event hosting: well, it's just LAN, but with event system included
    - an event is announced and discussed via existing public methods of communication
    - event organizer launches the system (which is open source and one command lauchnable in docker)
    - event organizer may or may not choose invitational format or open access
    - so either the ip/domain is publicly announced or is sent to the players/observers only
    - event is played and streamed, after the event orgnaizer may choose to upload the game data for public access
- identity is an issue with such approach, as system starts fresh, but it is, again, non blocking, a future goal
- ui app has an extension, through which player can access the server: connect/browse/query etc.
- system can be hosted on a laptop with ease, should be designed efficiently, don't do what client machines can
    - e.g. host should only transfer game events data, with derived state being computed on the clients

no need for editor extensions: a directory with subdirs and files, edit with any editor

- game will use  a directory  (user's choice, can be a persistent git repo) to store code files
- game will create a uniquely named subdir for each game (even on restart)
- a player can edit files with the editor of their choice, and easily reference code from previous games
- /express-in-code-games-dir
    - /eas9d7as-unique-name-dir-for-a-game
        - file1.code
        - file2.code
        - ...
- files will be read by the game, it's up to the player to edit and save on time
- REPL server should be local, apply updates from upstream and handle expression evaluations 

scenario leads the way

- scenario chooses and implements ui and win conditions, game flow
- it complies to game apis and uses them to read/eval code etc.
- this way scenarios stay diverse and unbounded, decoupling general concerns from a scneario's gameplay

drafts

- Blizzards War Chest league is an absolutely brilliant event
    - https://liquipedia.net/starcraft2/War_Chest_Team_League
- because of the draft
    - https://youtu.be/9Rg84bYapLU
- so that should be possible to host an event (in laptop edition as well), and have draft and vetos
    - and being able to draft players on your team is amazing
    - and play in SC Proleague format (like Warchest, bo5, 4 games + ace)
- it is a amazing way to have a team event for 1v1 game
- and you can observe/enjoy other games while waiting for yours
- it is intercative, communicative, yet still 1v1
- and trash talk, and team strategy of which players for which scenarios
- definately drafts should be a key element of Death Star Game


scenarios

battle

- units like in rts, but with more hp (like heroes)
- initial position may be random, but mirrored
- palyers control units via code, changes are made between action
- for example
    - 'attack move from x to y, but if this that go to z'
    - 'repair these types of untis in this area'
    - 'rotate shield frequencies this way to better defend agains ground or air'
    - 'move these units here, those there'
    - 'reconfigure to use air-attack'
    - ...
- 30sec program, 30sec action (battle), 30sec program, 30sec action, 2min program, final 2min battle
- or any other configuurable durations/settings
- no mouse needed, but still amazing for viewership and discussion
- api's of units should be high level enough, but more than standard 'move, a-move, hold, build, collect,repair + some unit specific commands'
